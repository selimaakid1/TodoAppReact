{"version":3,"sources":["TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","props","handleChange","e","setState","text","target","value","addItems","todoList","state","concat","name","complete","deleteItems","nom","filter","el","map","className","this","placeholder","onChange","Button","variant","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAmFeA,E,YA/EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,aAAe,SAAAC,GACX,EAAKC,SAAS,CACVC,KAAMF,EAAEG,OAAOC,SAXJ,EAcnBC,SAAW,WACP,EAAKJ,SAAS,CACVK,SAAU,EAAKC,MAAMD,SAASE,OAAO,CAACC,KAAM,EAAKF,MAAML,KAAMQ,UAAU,IAAQR,KAAK,MAhBzE,EAmBnBS,YAAc,SAACC,GACX,EAAKX,SAAS,CACVK,SAAU,EAAKC,MAAMD,SAASO,QAAO,SAAAC,GAAE,OAAIF,IAAOE,EAAGL,WArB1C,EAwBnBC,SAAW,SAACE,GACR,EAAKX,SAAS,CACVK,SAAU,EAAKC,MAAMD,SAASS,KAAI,SAAAD,GAAE,OAAIA,EAAGL,OAASG,EAAZ,eAAuBE,EAAvB,CAA2BJ,UAAYI,EAAGJ,WAAYI,QAxBlG,EAAKP,MAAQ,CAETD,SAAU,IAJC,E,sEA6BT,IAAD,OACL,OACI,yBAAKU,UAAU,WACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,aAAd,cAGA,wBAAIA,UAAU,cAAd,iBAGA,yBAAKA,UAAU,cACX,2BAAOd,KAAK,OAAOO,KAAK,OAAOL,MAAOa,KAAKV,MAAML,KAAMgB,YAAY,mBAAmBC,SAAUF,KAAKlB,eACrG,kBAACqB,EAAA,EAAD,CAAQC,QAAQ,gBAAgBL,UAAU,SAASM,QAASL,KAAKZ,UAAjE,SAIR,yBAAKW,UAAU,gBACX,wBAAIA,UAAU,YAAd,8BAIJ,yBAAKA,UAAU,YACVC,KAAKV,MAAMD,SAASS,KAAI,SAAAD,GAAE,OACvB,yBAAKE,UAAU,aACX,6BACA,kBAACI,EAAA,EAAD,CAAQC,QAAQ,QAAQL,UAAU,cAAcM,QAAS,kBAAM,EAAKZ,SAASI,EAAGL,QAAhF,YACA,kBAACW,EAAA,EAAD,CAAQC,QAAQ,QAAQL,UAAU,YAAYM,QAAS,kBAAM,EAAKX,YAAYG,EAAGL,QAAjF,WAEA,6BACA,wBAAIO,UAAWF,EAAGJ,SAAW,YAAc,YACtCI,EAAGL,YAOpB,6BACA,6BACA,kC,GArEMc,a,MCUPC,MATf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab465efd.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Button from 'react-bootstrap/Button'\n\nclass TodoApp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            todoList: []\n        }\n        \n      \n    }\n    handleChange = e => {\n        this.setState({\n            text: e.target.value\n        })\n    }\n    addItems = () => {\n        this.setState({\n            todoList: this.state.todoList.concat({name: this.state.text, complete: false}),text:\"\"\n        })\n    }\n    deleteItems = (nom) => {\n        this.setState({\n            todoList: this.state.todoList.filter(el => nom !==el.name)\n        })\n    }\n    complete = (nom) => {\n        this.setState({\n            todoList: this.state.todoList.map(el => el.name === nom ? { ...el, complete : !el.complete} : el )\n        })\n    }\n    render() {\n        return (\n            <div className='todoApp'>\n                <div className='todoText'>\n                    <h1 className='todoTitle'>\n                        To-Do App!\n                    </h1>\n                    <h5 className='todoAddnew'>\n                        Add new To-Do\n                    </h5>\n                    <div className='todoInputs'>\n                        <input text='text' name='text' value={this.state.text} placeholder='Enter a new task' onChange={this.handleChange}/>\n                        <Button variant=\"outline-light\" className='addBtn' onClick={this.addItems}>Add</Button>\n                    </div>\n                </div>\n\n                <div className='todoNewItems'>\n                    <h2 className='todoWork'>\n                        Let's get some work done!\n                    </h2>\n                </div>\n                <div className='NewItems'>\n                    {this.state.todoList.map(el =>\n                        <div className='NewItems1'>\n                            <div>\n                            <Button variant=\"light\" className='completeBtn' onClick={() => this.complete(el.name)}>Complete</Button>\n                            <Button variant=\"light\" className='deleteBtn' onClick={() => this.deleteItems(el.name)}>Delete</Button> \n                            </div>\n                            <div>\n                            <h2 className={el.complete ? 'itemName1' : 'itemName'}>\n                                {el.name}\n                            </h2>\n                            </div>\n                        </div>\n                        )}\n\n                </div>\n                <br />\n                <br />\n                <hr />\n            \n            </div>\n\n\n\n\n\n                    )\n                }\n            }\nexport default TodoApp","import React from 'react';\nimport TodoApp from './TodoApp'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}